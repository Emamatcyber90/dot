# vim: filetype=sh

# My rc file, I include this from .profile, .bashrc, and .zshrc like so:
# . "$HOME/.config/gibrc"
# The script must be sourced.

### INITIAL SETUP ###

case $- in
  *i*) [ "$GIBRC" ] && echo "Reusing gibrc..." || echo "Using gibrc..." ;;
  *) return ;; # Exit if not running interactively.
esac
GIBRC="${GIBRC:-0}" # First time through this is 0, next time 1 (etc).
timer=$SECONDS # Show how long startup took from this point at first prompt.

exists() { which "$1" >/dev/null 2>&1; } # Check if command exists (is in path).
works() { "$1" --version >/dev/null 2>&1; } # Check if command actually works (can get its version).

# Internal use variables (shell=current shell, ssh=whether we're sshed).
[ "$SSH_CLIENT" -o "$SSH_TTY" ] && ssh="true" || ssh=""
[ "$ZSH_VERSION" ] && shell=zsh
[ "$BASH_VERSION" ] && shell=bash
case $0 in
  -ksh) shell=ksh ;;
  -sh) shell=sh ;;
esac
shell=${shell:-"$(ls -l /proc/$$/exe | sed 's%.*/%%')"}
uname="$(uname)"
unamem="$(uname -m)"

# If we're sshed into a machine, and didn't manually run a different, try a better shell.
if [ "$ssh" -a "$GIBRC" = 0 -a "$shell" != zsh ]; then
  if exists zsh; then
    echo "Upgrading to zsh"
    export GIBRC=1
    zsh && exit || printf "\nERROR(gibrc): Zsh crashed with exit code: $?\n" # Replace existing shell with zsh.
  elif [ "$shell" != bash ] && exists bash; then
    echo "Upgrading to bash"
    export GIBRC=1
    bash && exit || printf "\nERROR(gibrc): Bash crashed with exit code: $?\n" # Replace existing shell with bash.
  fi
fi

### ENV VAR DEFAULTS ###

export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"} # Config stuff should go here.
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"} # Cache stuff should go here.
export XDG_DATA_HOME=${XDG_DATA_HOME:-"$HOME/.local/share"} # Data should go here.
export LESSHISTFILE=${LESSHISTFILE:-"$XDG_CACHE_HOME/less/history"} # Get less to put its history here.
#export INPUTRC=${INPUTRC:-"$XDG_CONFIG_HOME/inputrc"} # inputrc file goes here (unused currently).
export CARGO_HOME=${CARGO_HOME:-"$XDG_DATA_HOME/cargo"} # Cargo goes here.
export RUSTUP_HOME=${RUSTUP_HOME:-"$XDG_DATA_HOME/rustup"} # Rustup goes here.
export ATOM_HOME=${ATOM_HOME:-"$XDG_CONFIG_HOME/atom"} # Atom goes here.
export npm_config_devdir=${npm_config_devdir:-"$XDG_CACHE_HOME/node-gyp"} # Set node-gyp download location.
export npm_cache=${npm_cache:-"$XDG_CACHE_HOME/npm"} # Set npm cache location.
export NODE_REPL_HISTORY=${NODE_REPL_HISTORY="$XDG_CACHE_HOME/node_repl_history"} # Set node-gyp download location.
export BABEL_CACHE_PATH=${BABEL_CACHE_PATH="$XDG_CACHE_HOME/babel/cache.json"} # Set babel cache location.
export GRADLE_USER_HOME="$XDG_CACHE_HOME/gradle" # Also contains gradle.properties (symlink from XDG_CONFIG_HOME).
export CCACHE_DIR="$XDG_DATA_HOME/ccache" # ccache cache dir.
export HELM_HOME="$XDG_DATA_HOME/helm" # Helm home directory.
export BLUEMIX_HOME="$XDG_DATA_HOME/bluemix" # Bluemix home directory (creates .bluemix inside)
export VIRTUAL_ENV_DISABLE_PROMPT=1 # Add the virtualenv prompt myself.
export LESS="--tabs=1,3 --ignore-case --RAW-CONTROL-CHARS" # Tab is 2 spaces, search ignores case, enable colours.
export PAGER=less
HISTSIZE=10000 SAVEHIST=10000 HISTFILE="$XDG_CACHE_HOME/$shell/history" # Set history file location and size.
c="$XDG_CONFIG_HOME" # Shortcut to the config directory (`v $c/gibrc` to edit this file).
[ -d "$XDG_CONFIG_HOME/terminfo" ] && export TERMINFO="$XDG_CONFIG_HOME/terminfo" # Put terminal info in here.

### FUNCTIONS ###

for i in please po pu rd d afind _ md run-help +; do alias | sed 's/^alias //' | grep -q "^$i=" && unalias "$i"; done; unset i # Remove unwanted aliases if defined.
alias md="mkdir -p" # md foo = mkdir foo.
mdc() { command mkdir -p $*; [ $# = 1 ] && cd "$1" || true; } # mdc foo = mkdir foo && cd foo.
# Add to beginning of path.
pathadd() { [ -d "$1" ] && export PATH="$1"$(echo ":$PATH:" | sed "s|:$1:|:|" | sed 's|:$||'); }
# Add to end of path.
pathapp() { [ -d "$1" ] && export PATH=$(echo ":$PATH:" | sed "s|:$1:|:|" | sed 's|^:||')"$1"; }
exists fd || fd() { find . -iname "*$**"; } # Find by filename (case insensitive).
pth() { # Returns absolute path to file(s) including file name.
  for i in "$@"; do # Args = relative filenames.
    if [ -d "$i" ]; then (pushd "$i" >/dev/null; pwd) # dir.
    elif [ -f "$i" ]; then  # file.
      case $i in */*) echo "$(pushd ${i%/*} >/dev/null; pwd)/${i##*/}" ;; *) echo "$PWD/$i" ;; esac
    fi
  done
}

### PATH ADDITIONS ###

pathadd /usr/local/bin # Missed in some shells.
pathadd /usr/local/sbin # Missed in some shells.
pathadd "$HOME/bin" # Put random binaries you want to run in here.
pathadd /usr/lib/ccache # Add ccache to the path if installed (Linux).
pathadd /usr/local/opt/ccache/libexec # Add ccache to the path if installed (macOS).
pathadd "$HOME/.local/bin"
pathadd "$CARGO_HOME/bin" # Rust packages.

### SHELL SPECIFIC ###

# Add to end of path.
pathapp /usr/local/opt/coreutils/libexec/gnubin # Coreutils from brew on macOS, don't replace mac ls.
exists gls && alias ls=gls
if ls --color=auto >/dev/null 2>&1; then
  exists gls && alias ls='gls --color=auto' || alias ls='ls --color=auto'
  if [ -e "$XDG_DATA_HOME"/LS_COLORS/LS_COLORS ]; then
    eval "$(dircolors -b "$XDG_DATA_HOME/LS_COLORS/LS_COLORS")" # Load custom LS_COLORS from project.
  else
    source "$XDG_DATA_HOME/LS_COLORS.old" # Use old version if LS_COLORS not installed.
  fi
  [ "$LS_COLORS" ] && export LS_COLORS # ls isn't a builtin, so colors must be exported.
elif [ "$uname" = Darwin ]; then
  alias ls='ls -G' # Colour ls on macOS.
  export LSCOLORS="Gxfxcxdxbxegedabagacad"
fi

[ "$uname" = Darwin ] && alias dl=rmtrash
[ "$uname" = Linux ] && alias dl="gio trash"

if [ "$shell" = zsh ]; then # zsh specific options.
  export ZDOTDIR="${XDG_CONFIG_HOME}/zsh" # Path to zsh config files.
  # cd pushes onto pushd stack (Try `cd -<Tab>`)
  # If you type a file name/path by itself, cd to it, don't print dir on cd unless in $CDPATH.
  setopt autopushd autocd pushd_silent pushdignoredups pushdminus
  setopt prompt_subst prompt_percent # Allow variables and functions to be used in the prompt.
  setopt no_list_ambiguous # Show menu on first tab if multiple matches (don't wait for second tab).
  setopt no_list_beep # Don't beep if tab-complete has multiple choices, only if no such file.
  setopt incappendhistory # Add to history file immediately (don't wait till shell exits).
  setopt hist_ignore_all_dups hist_ignore_space share_history extended_history hist_expire_dups_first
  setopt always_to_end complete_in_word long_list_jobs # Completion related options.
  setopt interactive_comments # Allow comments in the terminal.
  chpwd() { ls -A; } # Auto ls after changing directory.
  CDPATH=~ # Check ~ for directories after checking . (`c/d/` matches `./c*/d*/`, then tries `~/c*/d*/`).

  # Put (or symlink) autocomplete scripts in here.
  fpath=("$XDG_DATA_HOME/zfunc" $fpath)

  # Seems to be a bug in earlier zsh versions.
  zsh_v=(${(@s/./)ZSH_VERSION}) # Convert version string to an array.
  [[ "${zsh_v[0]}" -gt 4 || ("${zsh_v[0]}" -eq 4 && "${zsh_v[1]}" -gt 3) ]] && fpath=(/usr/local/share/zsh-completions $fpath) # zsh-completions.
  # [ "${zsh_v[0]}" -gt 4 -o "${zsh_v[0]}" -eq 4 -a "${zsh_v[1]}" -gt 3 ] && fpath=(/usr/local/share/zsh-completions $fpath) # zsh-completions.

  for file in "$ZDOTDIR"/{completion-keybindings,gib-theme,macos-setdir}.zsh; do
    source "$file" || true
  done
  [[ "$unamem" != s390x ]] && source "$XDG_DATA_HOME/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" || true

elif [ "$shell" = bash ]; then # Bash specific options.
  set -o vi # Vim mode in bash.
  shopt -s autocd 2>/dev/null # type directory name to cd.
  cs() { cd "$@" && ls; } # cs => cd and ls.
  cd=cs # Used in .. commands below (so .. does `cs ..`).
  CDPATH=:~ # Check ~ for directories after checking .
  bind Space:magic-space 2>/dev/null # !31 autoexpands on space.
  bind 'set completion-ignore-case on' 2>/dev/null # case-insensitive tab completion.

  # TODO(gib): Fix bug where if you type a whole line, the second line wraps and overwrites the first one.
  _gib_bash_prompt_command() {
    local ret_status="$?"
    local no_col='\e[0m' ret_col='\e[38;5;46m'
    [ "$ret_status" != 0 ] && ret_col='\e[38;5;196m'

    PS1="\n"
    [ "$ssh" ] && PS1+='\e[38;5;161m\h '"$no_col"
    PS1+="${ret_col}·❯${no_col} "

    local venv='' # If a virtual env was set, add it to the right prompt.
    [[ -n "$VIRTUAL_ENV" ]] && venv="(${VIRTUAL_ENV##*/}) " # TODO(gib): Color this in 242.
    printf "${ret_col}%*s${no_col}" "$COLUMNS" "$venv$(pwd | sed "s|^$HOME|~|")" # Right prompt equivalent in bash.
  }
  PROMPT_COMMAND=_gib_bash_prompt_command # Use the above function to generate the prompt.
fi

if exists fzf && fzf --version >/dev/null 2>&1; then
  exists fd && { export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git' # Use fd for fuzzy finding if available.
                 export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"; }
  for file in "$XDG_DATA_HOME"/fzf/shell/{completion,key-bindings}.$shell; do
    source "$file" # 2>/dev/null || true
  done
fi
command mkdir -p "$XDG_CACHE_HOME/$shell"  # Create HISTFILE dir if necessary.

### ALIASES ###

alias x="exit 0" # x exits the terminal.
alias c=clear # c clears the terminal screen (can also use Ctrl-L).
alias g=git # Use with commands in $c/git/config for best results.

# Clone repo and cd into path.
gcl() {
  local clone_dir
  clone_dir="$(set -o pipefail; git cl $@ 3>&1 1>&2 2>&3 3>&- | tee /dev/stderr | awk -F \' '/Cloning into/ {print $2}' | head -1)"
  local ret="$?"
  [ "$clone_dir" -a -d "$clone_dir" ] && echo cd "$clone_dir" && cd "$clone_dir"
  return $ret
}

alias path='echo $PATH' # Single quotes so we echo path at runtime, not alias time.
alias h=history # Shows command history.
alias s=ssh # Reset cursor to block and ssh.
alias dt="date +%Y-%m-%d" # Basic date format (unambiguous, easy to sort etc.)
alias dT="date +%d-%b-%y" # More readable date format (ambiguous).

alias l='ls -lAh' # Hidden, detail, human readable numbers.
alias la='ls -A'  # List hidden files as well.
alias ll='ls -l'  # Gives more detail about files.
[ -z "$cd" ] && cd=cd # We only want cd=cs in bash.
alias ..="$cd .."             # .. -> go up a directory.
alias ...="$cd ../.."             # ↳ go up two directories.
alias ....="$cd ../../.."         # ↳ go up two directories.
alias .....="$cd ../../../.."     # ↳ go up two directories.
alias ......="$cd ../../../../.." # ↳ go up two directories.
alias -- -="$cd -" # - cd's to the last directory.
# Execute previous commands (1 = !-2, 2 = !-3 etc., remember that Enter is !!)
alias 1="fc -e : -2"; alias 2="fc -e : -3"

{ works nvim && VIM=nvim; } || { works vim && VIM=vim; } || VIM=vi # Take what you can get.
export VISUAL=${VISUAL:-$VIM} EDITOR=${EDITOR:-$VIM} # Set vim/nvim as the default editor.
alias xv="xargs \$${ZSH_VERSION:+=}VISUAL" v="\$${ZSH_VERSION:+=}VISUAL" # Work around zsh's "helpful" autoquoting.
exists vimr && alias vm=vimr # Use `vm` for GUI vim, need to add a Linux equivalent.
ulimit -c unlimited # Allow saving of coredumps.
alias busy='cat /dev/urandom | hexdump -C | grep "ca fe"' # Makes it look like you're busy with important hacker stuff.
[ "$uname" = "Darwin" ] && alias ldd="otool -L" # macOS equivalent to ldd.
[ "$uname" = "Darwin" ] && { alias cpy="pbcopy"; alias pst="pbpaste"; alias o=open; } # Cross-platform copy/paste/open terminal commands.
[ "$uname" = "Linux" ] && { alias cpy="xclip -selection clipboard"; alias pst="xclip -selection clipboard -o"; alias o=xdg-open; }

# I don't have nvm autorun on every shell, I us `nv` when I want to start it.
# This also allows me to frequently `make -j4 install` node master, and have
# that as the default (in /usr/local/bin/node).
export npm_config_userconfig="$XDG_CONFIG_HOME/npm/config"
[ ! -d "$(dirname "$npm_config_userconfig")" ] && command mkdir -p "$(dirname "$npm_config_userconfig")"
export NVM_DIR="$XDG_DATA_HOME/$([ "$unamem" != x86_64 ] && echo "$unamem/")nvm"
alias nv='. $NVM_DIR/nvm.sh'  # Start nvm with alias, o/w too much startup cost.

## Rust commands.
alias cn="cargo new --bin" cb="cargo build" cr="cargo run" ct="cargo test"
alias ctag='ctags -R . $HOME/bin/src/rust' # Populate ctags from rust src.
alias ru=rustup e=exercism k=kubectl
rs() { for i in $@; do rustc ${i%.rs}.rs; ./${i%.rs}; done; } # Compile/run (rs a.rs b).

# Build node with ninja.
alias bn='export CPPFLAGS=-fdiagnostics-color && ./configure && tools/gyp_node.py -f ninja && ninja -C out/Release && ln -fs out/Release/node node'

## Set prompt for SSH windows.
if [ "$ssh" ]; then
  case $shell in
    zsh|fish|bash) ;; # These should be set elsewhere.
    ksh93) PS1='\E[35;1m '"$(hostname)"' \n $PWD \E[0m $ ' ;;
    *) PS1="$(hostname) ·❯ " ;;
  esac
else # Things to only do if we're not in SSH mode.
  # Set key repeat rate if available (Linux only). You probably want something less insane here, like rate 250 30.
  if [ "$(uname)" = Linux ]; then
    exists xset && xset r rate 120 45
    export PANEL_FIFO="/tmp/panel-fifo" # Used by bspwm.
  fi
fi

# Basic keys on old shells.
if [ "$shell" = ksh93 -o "$shell" = ksh ]; then
  set -o emacs
  alias __A=`echo "\020"`     # up arrow = ^p = back a command.
  alias __B=`echo "\016"`     # down arrow = ^n = down a command.
  alias __C=`echo "\006"`     # right arrow = ^f = forward a character.
  alias __D=`echo "\002"`     # left arrow = ^b = back a character.
  alias __H=`echo "\001"`     # home = ^a = start of line.
  alias __Y=`echo "\6"`       # end = ^e = end of line.
fi

export GIBRC="$(expr $GIBRC + 1)" # Increment GIBRC.
