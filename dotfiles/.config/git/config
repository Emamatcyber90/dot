[alias]
  # Commits: @=HEAD, -=last commit.
  # N.B. # at end of func allows parsing $1 args.
  # Helper functions:
  headUpstream = rev-parse --abbrev-ref --symbolic-full-name @{u} # Upstream of current branch, e.g. origin/master.
  headRemote = "!git headUpstream | cut -d '/' -f 1" # e.g. origin.
  headBranch = symbolic-ref --short HEAD # e.g. master.

  a   = add
  ap  = add -p # Adds files in hunks (only add some of the changes you made).
  aa  = add -A # Adds everything.
  ama = am --abort
  amc = am --continue
  ams = am --skip

  b   = branch
  ba  = branch -a # Show all local and remote branches.
  bd  = branch -D # Delete branch.
  br  = branch -r # Show remote branches only.
  bdd = "!lastBranch=$(git headBranch); git checkout -; git branch -D $lastBranch" # Delete current branch.
  bp  = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d" # Delete orphaned local branches.
  bP  = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D" # Delete orphaned local branches!
  bt  = "!git branch -u $1/$(git headBranch) #" # g bt origin sets upstream to origin.

  # I manually specify -S because gpgsign only works with Git 2.x. Also it
  # means that test suites using `git commit` don't break.
  ce  = config --global --edit # Open this file with $VISUAL.
  c   = commit -S
  ca  = commit -S -a
  cm  = commit -S --amend
  cmn = commit -S --amend --no-edit
  can = commit -S --amend --no-edit -a
  cn  = clean -fdx
  cl  = clone --recursive --origin up # Always include submodules, set default remote to "up".
  cp  = cherry-pick
  cpa = cherry-pick --abort
  cpc = cherry-pick --continue
  cps = cherry-pick --skip
  co  = checkout
  cop = checkout -p # Selectively undo some of the changes you made.
  cot = checkout -t # g cot up/master means checkout master tracking the one in up.
  fix = commit --fixup # g fix SHA means rebasing will attach to that SHA.

  d   = diff HEAD             # diff of staged and unstaged..
  de  = "!git diff HEAD --name-only | xargs $VISUAL" # Open files changed since last commit in editor.
  dn  = diff HEAD --name-only # diff of staged and unstaged file names.
  ds  = diff --staged # Diff of staged files (`git diff` for unstaged).
  du  = "!git diff $(git headUpstream)"             # diff between working tree and upstream branch.
  dus = "!git diff --staged $(git headUpstream)"             # diff between working tree and upstream branch.
  dun = "!git diff $(git headUpstream) --name-only" # diff between working tree and upstream branch file names.

  f = fetch
  fa = fetch --all
  # Create/update branch from Github PR, `g fp 657 origin` or `g fp` (Defaults: $1=HEAD, $2=upstreamRemote).
  fp = "! b=${2:-$(git headRemote)}; b=${b:-up}; a=${1:-$(git headBranch)}; git fetch -fu $b pull/$a/head:$a; git checkout $a; git branch -u $b #"

  h = help

  l   = log --graph --decorate --oneline # Graph log.
  la  = log --graph --decorate --oneline --all # Graph log of all branches.
  ll  = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit

  mc  = "!echo \"$VISUAL\" | grep -iq vi && c=\"-c /=======\" || c=\"\"; git diff --name-only --diff-filter=U | xargs $VISUAL $c" # Open merge conflicts in editor.
  mf  = merge --ff-only

  p   = push
  pf  = push --force-with-lease # Better version of push -f.
  pa  = "!curl -L $1.patch | git am -S --whitespace=fix #" # Patch Github PR.
  pap = "!curl -L $1.patch | git am -3 -S --whitespace=fix #" # Please patch it.
  paw = "!curl -L $1.patch | git am -3 -S --whitespace=warn #" # Patch but don't fix whitespace.
  pl  = pull
  pt  = "!git push -u $1 $(git headBranch) #" # g pt origin sets branch to track up + pushes.

  ra  = remote add
  rb  = rebase -S # Rebase and gpg sign.
  rba = rebase --abort
  rbc = rebase --continue
  rbs = rebase --skip
  rhh = "!git reset --hard $(git headUpstream)"
  rh  = reset --hard
  ri  = rebase -i -S --autosquash
  rii = "!git rebase -i -S --autosquash $(git headUpstream)" # Reset to upstream branch, not needed with merge.defaultToUpstream.
  rr  = remote rename # Change name of remote `g rr origin up`.
  rs  = remote set-url # Change URL of remote `g rs up hsg:dot`.
  rv  = remote -v # Show remotes (with URLs).

  s   = status
  sh  = show
  she = "!git show --pretty="" --name-only | xargs $VISUAL" # Open files changed in last commit in editor.
  shn = show --pretty="" --name-only # Show names of files changed only.
  st  = stash
  stp = stash pop
  std = stash drop

  sma = submodule add                         # Add a new submodule: g sma url path.
  smi = submodule update --init --recursive   # Initialise submodules.
  smf = submodule update --init               # Fetch specified submodule versions.
  smu = submodule update --recursive --remote # Update submodules to latest versions.

[apply]
  whitespace = fix # Fix whitespace when applying patches.
[color]
  ui = true # Default since git 1.8.4, remove when possible.
[commit]
  # gpgsign = true # Always sign commits, available since Git 2.0. Off because
  # some people might not have gpg keys (and it breaks npm test suite).
[credential]
  helper = osxkeychain
[diff]
  wsErrorHighlight = all # diff and show show whitespace errors.
  renames = copies # Copies count as renames.
  submodule = log # Show information about submodules in diffs and logs.
[fetch]
  prune = true # Delete local tracking branches if remote is gone.
[format]
  pretty = fuller # Shows author and committer.
[help]
  autocorrect = 1 # Autocorrect nonexistant commands after 0.1s.
[log]
  follow = true # Log tracks file move/rename.
[merge]
  defaultToUpstream = true # Not set by default before Git 2.0, remove when possible.
  conflictstyle = diff3 # Show common ancestor in diffs (initially confusing, but very helpful).
[pull]
  rebase = true # pull = fetch + rebase, not fetch + merge.
[push]
  default = simple # Only push the branch I'm on.
  #followTags = true # Push tags that are annotated and reachable. Off because I don't currently want to push tags by default.
[rebase]
  autosquash = true # Squash commits with autosquash! as commit message (see `git fix`).
[rerere]
  enabled = true # Remember how I resolved the same merge conflict last time.
[submodule]
  fetchJobs = 8 # Number of jobs to fetch when I submodule clone/update.

# Try `g cl hh:nodejs/node`.
[url "https://bitbucket.org/"]
    insteadOf = bb:

[url "https://github.com/"]
    insteadOf = hh: # Hub https.
[url "git@github.com:"]
    insteadOf = hs: # Hub ssh.
[url "https://github.com/gibfahn/"]
    insteadOf = hhg: # Hub https gibfahn.
[url "git@github.com:gibfahn/"]
    insteadOf = hsg: # Hub ssh gibfahn.

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://gitlab.com/"]
    insteadOf = lh: # Lab https.
[url "git@gitlab.com:"]
    insteadOf = ls: # Lab ssh.
[url "https://gitlab.com/gib/"]
    insteadOf = lhg: # Lab https gib.
[url "git@gitlab.com:gib/"]
    insteadOf = lsg: # Lab ssh gib.

[url "https://github.ibm.com/"]
    insteadOf = ih: # IBM https.
[url "git@github.ibm.com:"]
    insteadOf = is: # IBM ssh.
[url "https://github.ibm.com/gib/"]
    insteadOf = ihg: # IBM https gib.
[url "git@github.ibm.com:gib/"]
    insteadOf = isg: # IBM ssh gib.

[user]
  # Needs to match gpg signing email.
  name = Gibson Fahnestock # REPLACEME
  email = gibfahn@gmail.com #REPLACEME
